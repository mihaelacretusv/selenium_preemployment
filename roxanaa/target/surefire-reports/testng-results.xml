<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="25" passed="24">
  <reporter-output>
  </reporter-output>
  <suite name="LogInSuite" duration-ms="23748" started-at="2019-02-20T13:42:29 EET" finished-at="2019-02-20T13:42:53 EET">
    <groups>
      <group name="logInPositiveTest">
        <method signature="LoginTest.logValidUser()[pri:1, instance:logintest.LoginTest@cb5822]" name="logValidUser" class="logintest.LoginTest"/>
        <method signature="LoginTest.signOut()[pri:2, instance:logintest.LoginTest@cb5822]" name="signOut" class="logintest.LoginTest"/>
      </group> <!-- logInPositiveTest -->
      <group name="logInNegativeTest">
        <method signature="LoginTest.logInInvalidUserWithBlankFields()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInInvalidUserWithBlankFields" class="logintest.LoginTest"/>
        <method signature="LoginTest.logInInvalidUserWithSpecialCharacters()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInInvalidUserWithSpecialCharacters" class="logintest.LoginTest"/>
        <method signature="LoginTest.logInInvalidUserWithValidEmailAddressButNonExistingAccount(java.lang.String)[pri:4, instance:logintest.LoginTest@cb5822]" name="logInInvalidUserWithValidEmailAddressButNonExistingAccount" class="logintest.LoginTest"/>
        <method signature="LoginTest.logInInvalidUsersWithNumerals()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInInvalidUsersWithNumerals" class="logintest.LoginTest"/>
        <method signature="LoginTest.logInUserThatIsAlreadyLoggedIn()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInUserThatIsAlreadyLoggedIn" class="logintest.LoginTest"/>
        <method signature="LoginTest.logInvalidUser()[pri:3, instance:logintest.LoginTest@cb5822]" name="logInvalidUser" class="logintest.LoginTest"/>
      </group> <!-- logInNegativeTest -->
    </groups>
    <test name="Test" duration-ms="23748" started-at="2019-02-20T13:42:29 EET" finished-at="2019-02-20T13:42:53 EET">
      <class name="logintest.LoginTest">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:logintest.LoginTest@cb5822]" name="beforeSuite" is-config="true" duration-ms="2622" started-at="2019-02-20T13:42:27 EET" finished-at="2019-02-20T13:42:29 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="init()[pri:0, instance:logintest.LoginTest@cb5822]" name="init" is-config="true" duration-ms="10377" started-at="2019-02-20T13:42:29 EET" finished-at="2019-02-20T13:42:40 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="logInInvalidUserWithBlankFields()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInInvalidUserWithBlankFields" duration-ms="1" started-at="2019-02-20T13:42:40 EET" finished-at="2019-02-20T13:42:40 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logInInvalidUserWithBlankFields -->
        <test-method status="PASS" signature="logInInvalidUserWithSpecialCharacters()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInInvalidUserWithSpecialCharacters" duration-ms="0" started-at="2019-02-20T13:42:40 EET" finished-at="2019-02-20T13:42:40 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logInInvalidUserWithSpecialCharacters -->
        <test-method status="PASS" signature="logInInvalidUsersWithNumerals()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInInvalidUsersWithNumerals" duration-ms="1" started-at="2019-02-20T13:42:40 EET" finished-at="2019-02-20T13:42:40 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logInInvalidUsersWithNumerals -->
        <test-method status="PASS" signature="logInUserThatIsAlreadyLoggedIn()[pri:0, instance:logintest.LoginTest@cb5822]" name="logInUserThatIsAlreadyLoggedIn" duration-ms="0" started-at="2019-02-20T13:42:40 EET" finished-at="2019-02-20T13:42:40 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logInUserThatIsAlreadyLoggedIn -->
        <test-method status="PASS" signature="logValidUser()[pri:1, instance:logintest.LoginTest@cb5822]" name="logValidUser" duration-ms="1932" started-at="2019-02-20T13:42:40 EET" finished-at="2019-02-20T13:42:42 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logValidUser -->
        <test-method status="PASS" signature="signOut()[pri:2, instance:logintest.LoginTest@cb5822]" name="signOut" duration-ms="1765" started-at="2019-02-20T13:42:42 EET" finished-at="2019-02-20T13:42:43 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- signOut -->
        <test-method status="PASS" signature="logInvalidUser()[pri:3, instance:logintest.LoginTest@cb5822]" name="logInvalidUser" duration-ms="9441" started-at="2019-02-20T13:42:43 EET" finished-at="2019-02-20T13:42:53 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logInvalidUser -->
        <test-method status="PASS" signature="logInInvalidUserWithValidEmailAddressButNonExistingAccount(java.lang.String)[pri:4, instance:logintest.LoginTest@cb5822]" name="logInInvalidUserWithValidEmailAddressButNonExistingAccount" duration-ms="177" started-at="2019-02-20T13:42:53 EET" finished-at="2019-02-20T13:42:53 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[email@mailinator.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logInInvalidUserWithValidEmailAddressButNonExistingAccount -->
        <test-method status="PASS" signature="closeBrowser()[pri:0, instance:logintest.LoginTest@cb5822]" name="closeBrowser" is-config="true" duration-ms="51" started-at="2019-02-20T13:42:53 EET" finished-at="2019-02-20T13:42:53 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeBrowser -->
      </class> <!-- logintest.LoginTest -->
    </test> <!-- Test -->
  </suite> <!-- LogInSuite -->
  <suite name="RegisterSuite" duration-ms="21274" started-at="2019-02-20T13:42:55 EET" finished-at="2019-02-20T13:43:16 EET">
    <groups>
      <group name="positiveTest">
        <method signature="RegisterTest.createAccountWithAllFieldsCompleted()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithAllFieldsCompleted" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.validCheckOneTitleRadioButton()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="validCheckOneTitleRadioButton" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.validCreateAccount()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="validCreateAccount" class="createaccounttest.RegisterTest"/>
      </group> <!-- positiveTest -->
      <group name="redundantTest">
        <method signature="RegisterTest.checkCreateAccountButtonCanBeClicked()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="checkCreateAccountButtonCanBeClicked" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.checkIfRegisterButtonIsVisible()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="checkIfRegisterButtonIsVisible" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.checkIfYouCanPressRegisterButton()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="checkIfYouCanPressRegisterButton" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithoutSelectingFromCountryDropdown()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithoutSelectingFromCountryDropdown" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithoutSelectingFromStateDropdown()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithoutSelectingFromStateDropdown" class="createaccounttest.RegisterTest"/>
      </group> <!-- redundantTest -->
      <group name="negativeTest">
        <method signature="RegisterTest.createAccountFillingOnlyTheNotMandatoryFields()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountFillingOnlyTheNotMandatoryFields" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithALargeNumberOfCharacters()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithALargeNumberOfCharacters" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithAllFieldsBlank()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithAllFieldsBlank" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithInvalidEmailFormat()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithInvalidEmailFormat" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithNumeralsInAllFields()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithNumeralsInAllFields" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithPasswordLessThanFiveCharacters()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithPasswordLessThanFiveCharacters" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.createAccountWithSpecialCharactersInAllFields()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithSpecialCharactersInAllFields" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.invalidCheckBothTitleRadioButtons()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="invalidCheckBothTitleRadioButtons" class="createaccounttest.RegisterTest"/>
        <method signature="RegisterTest.invalidCreateAccountWithAlreadyUsedEmailAddress()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="invalidCreateAccountWithAlreadyUsedEmailAddress" class="createaccounttest.RegisterTest"/>
      </group> <!-- negativeTest -->
    </groups>
    <test name="Test" duration-ms="21274" started-at="2019-02-20T13:42:55 EET" finished-at="2019-02-20T13:43:16 EET">
      <class name="createaccounttest.RegisterTest">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="beforeSuite" is-config="true" duration-ms="1981" started-at="2019-02-20T13:42:53 EET" finished-at="2019-02-20T13:42:55 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="init()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="init" is-config="true" duration-ms="10776" started-at="2019-02-20T13:42:55 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="checkIfYouCanPressRegisterButton()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="checkIfYouCanPressRegisterButton" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkIfYouCanPressRegisterButton -->
        <test-method status="PASS" signature="createAccountWithNumeralsInAllFields()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithNumeralsInAllFields" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithNumeralsInAllFields -->
        <test-method status="PASS" signature="invalidCreateAccountWithAlreadyUsedEmailAddress()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="invalidCreateAccountWithAlreadyUsedEmailAddress" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCreateAccountWithAlreadyUsedEmailAddress -->
        <test-method status="PASS" signature="createAccountWithAllFieldsBlank()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithAllFieldsBlank" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithAllFieldsBlank -->
        <test-method status="PASS" signature="createAccountWithALargeNumberOfCharacters()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithALargeNumberOfCharacters" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithALargeNumberOfCharacters -->
        <test-method status="PASS" signature="createAccountWithAllFieldsCompleted()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithAllFieldsCompleted" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithAllFieldsCompleted -->
        <test-method status="FAIL" signature="validCreateAccount()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="validCreateAccount" duration-ms="10483" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:16 EET">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of element located by By.id: customer_firstname (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of element located by By.id: customer_firstname (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at pageobjects.Register.firstNamePopulate(Register.java:33)
at createaccounttest.RegisterTest.validCreateAccount(RegisterTest.java:45)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:131)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:570)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:170)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:790)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:143)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at org.testng.TestRunner.privateRun(TestRunner.java:763)
at org.testng.TestRunner.run(TestRunner.java:594)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:398)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:392)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1146)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1067)
at org.testng.TestNG.runSuites(TestNG.java:997)
at org.testng.TestNG.run(TestNG.java:965)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"id","selector":"customer_firstname"}
  (Session info: chrome=72.0.3626.109)
  (Driver info: chromedriver=2.35.528161 (5b82f2d2aae0ca24b877009200ced9065a772e73),platform=Windows NT 10.0.17134 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'P5810', ip: '172.16.233.167', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_201'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.35.528161 (5b82f2d2aae0ca..., userDataDir: C:\Users\ROXANA~1.AMB\AppDa...}, cssSelectorsEnabled: true, databaseEnabled: false, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 72.0.3626.109, webStorageEnabled: true}
Session ID: 9feb5a3a8ca2580215354c56e8e88b62
*** Element info: {Using=id, value=customer_firstname}
at sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementById(RemoteWebDriver.java:372)
at org.openqa.selenium.By$ById.findElement(By.java:188)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.ui.ExpectedConditions$7.apply(ExpectedConditions.java:205)
at org.openqa.selenium.support.ui.ExpectedConditions$7.apply(ExpectedConditions.java:201)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCreateAccount -->
        <test-method status="PASS" signature="createAccountFillingOnlyTheNotMandatoryFields()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountFillingOnlyTheNotMandatoryFields" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountFillingOnlyTheNotMandatoryFields -->
        <test-method status="PASS" signature="createAccountWithoutSelectingFromStateDropdown()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithoutSelectingFromStateDropdown" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithoutSelectingFromStateDropdown -->
        <test-method status="PASS" signature="validCheckOneTitleRadioButton()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="validCheckOneTitleRadioButton" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCheckOneTitleRadioButton -->
        <test-method status="PASS" signature="checkIfRegisterButtonIsVisible()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="checkIfRegisterButtonIsVisible" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkIfRegisterButtonIsVisible -->
        <test-method status="PASS" signature="checkCreateAccountButtonCanBeClicked()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="checkCreateAccountButtonCanBeClicked" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkCreateAccountButtonCanBeClicked -->
        <test-method status="PASS" signature="createAccountWithPasswordLessThanFiveCharacters()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithPasswordLessThanFiveCharacters" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithPasswordLessThanFiveCharacters -->
        <test-method status="PASS" signature="createAccountWithoutSelectingFromCountryDropdown()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithoutSelectingFromCountryDropdown" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithoutSelectingFromCountryDropdown -->
        <test-method status="PASS" signature="createAccountWithSpecialCharactersInAllFields()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithSpecialCharactersInAllFields" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithSpecialCharactersInAllFields -->
        <test-method status="PASS" signature="createAccountWithInvalidEmailFormat()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="createAccountWithInvalidEmailFormat" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountWithInvalidEmailFormat -->
        <test-method status="PASS" signature="invalidCheckBothTitleRadioButtons()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="invalidCheckBothTitleRadioButtons" duration-ms="0" started-at="2019-02-20T13:43:06 EET" finished-at="2019-02-20T13:43:06 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCheckBothTitleRadioButtons -->
        <test-method status="PASS" signature="closeBrowser()[pri:0, instance:createaccounttest.RegisterTest@6d4b1c02]" name="closeBrowser" is-config="true" duration-ms="68" started-at="2019-02-20T13:43:16 EET" finished-at="2019-02-20T13:43:16 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeBrowser -->
      </class> <!-- createaccounttest.RegisterTest -->
    </test> <!-- Test -->
  </suite> <!-- RegisterSuite -->
</testng-results>
